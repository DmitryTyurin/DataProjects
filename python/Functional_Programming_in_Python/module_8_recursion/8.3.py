# –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–∏ is_member —á–µ—Ä–µ–∑ —Ä–µ–∫—É—Ä—Å–∏—é. –ù–∞–ø–æ–º–∏–Ω–∞—é, —Ñ—É–Ω–∫—Ü–∏—è is_member –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ value –≤ –ª–∏–Ω–µ–π–Ω–æ–º —Å–ø–∏—Å–∫–µ lst.
# –§—É–Ω–∫—Ü–∏—è is_member –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å True, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ value –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ lst, –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
# –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Å–ø–∏—Å–æ–∫ lst –Ω–µ –±—É–¥–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–º
def is_member(value, lst):
    if len(lst) == 0:
        return False
    elif lst[0] == value:
        return True
    else:
        return is_member(value, lst[1:])


# –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏—è power, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤–æ–¥–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä a –≤ —Å—Ç–µ–ø–µ–Ω—å n
# –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ –∏—Ç–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ä–µ–∫—É—Ä—Å–∏—é. –°–∞–º–æ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –º–µ–Ω—è—Ç—å—Å—è
def power(a: int, n: int) -> int:
    if n == 0:
        return 1
    else:
        return a * power(a, n - 1)


# –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ gcd, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–∏–π –æ–±—â–∏–π –¥–µ–ª–∏—Ç–µ–ª—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏
#
# def gcd(a: int, b: int) -> int:
#     while b:
#         a, b = b, a % b
#     return a
# –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ä–µ–∫—É—Ä—Å–∏–∏
def gcd(a: int, b: int) -> int:
    if b == 0:
        return a
    else:
        return gcd(b, a % b)


# –ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é is_palindrome, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ä–µ–∫—É—Ä—Å–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º. –í–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ –Ω–µ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ.
# –í —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞. –ó–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –∏ –ø—Ä–æ–±–µ–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.


def is_palindrome(word: str) -> bool:
    word = word.lower()

    if len(word) <= 1:
        return True
    elif word[0] == word[-1]:
        return is_palindrome(word[1:-1])
    else:
        return False


# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –∫–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —á–ª–µ–Ω –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏, –ø—Ä–∏–±–∞–≤–∏–≤ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ —á–∏—Å–ª–æ d, –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–µ–π.
# –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–ø–æ–ª–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é
# –ó–¥–µ—Å—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–≤–µ–Ω 1, –≤—Ç–æ—Ä–æ–π - 8 –∏ —Ç.–¥. –ö–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—É—Ç–µ–º –ø—Ä–∏–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–º–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É
# –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é get_arith_progression, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ n –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç n-–æ–µ —á–∏—Å–ª–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤—ã—à–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏.


def get_arith_progression(n: int) -> int:
    if n == 1:
        return 1
    else:
        return get_arith_progression(n - 1) + 7


# –í –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–µ –Ω–∞ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é –º—ã –∏–º–µ–ª–∏ –¥–µ–ª–æ —Å –æ–¥–Ω–æ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.
# –í –Ω–µ–π –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –±—ã–ª —Ä–∞–≤–µ–Ω 1, –∞ —Ä–∞–∑–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ d –±—ã–ª–∞ —Ä–∞–≤–Ω–∞ 7.
# –¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é get_arith_progression —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∞ –º–æ–≥–ª–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å n-–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –î–ª—è —ç—Ç–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è get_arith_progression –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
# a1 - –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# d - —Ä–∞–∑–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# n - –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ –≤ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏.
# –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–æ–≤ get_arith_progression(4, 2, 3)  –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ 3-–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 4-—Ö –∏ –∏–º–µ–µ—Ç —Ä–∞–∑–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ 2. –¢–∞–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
# –¢—Ä–µ—Ç—å–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –±—É–¥–µ—Ç —á–∏—Å–ª–æ 8.
# –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é get_arith_progression
def get_arith_progression(a1: int, d: int, n: int) -> int:
    if n == 1:
        return a1
    else:
        return get_arith_progression(a1 + d, d, n - 1)


# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å. –ï—Å–ª–∏ –Ω–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–∑–≤–µ—Å—Ç–∏ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ ùëé –≤ —Å—Ç–µ–ø–µ–Ω—å ùëõ, –≥–¥–µ ùëõ ‚Äî –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –º—ã –º–æ–∂–µ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏:
# –µ—Å–ª–∏ ùëõ —á–µ—Ç–Ω–æ–µ, —Ç–æ –º—ã –º–æ–∂–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç ùëé –≤ —Å—Ç–µ–ø–µ–Ω–∏ ùëõ –∫–∞–∫
# –µ—Å–ª–∏ ùëõ –Ω–µ—á–µ—Ç–Ω–æ–µ, —Ç–æ ùëé –≤ —Å—Ç–µ–ø–µ–Ω–∏ ùëõ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–∞–∫
# –ü—Ä–∏ —ç—Ç–æ–º  ùëõ‚àí1 –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—Ç–∞–Ω–µ—Ç —á–µ—Ç–Ω—ã–º —á–∏—Å–ª–æ–º –∏ —Ç–æ–≥–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ–æ—Ä–º—É–ª–æ–π –≤—ã—à–µ –¥–ª—è —á–µ—Ç–Ω—ã—Ö ùëõ.
# –ë–∞–∑–æ–≤—ã–º —Å–ª—É—á–∞–µ–º –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –Ω—É–ª–µ–≤–∞—è —Å—Ç–µ–ø–µ–Ω—å —á–∏—Å–ª–∞. –õ—é–±–æ–µ —á–∏—Å–ª–æ –≤ –Ω—É–ª–µ–≤–æ–π —Å—Ç–µ–ø–µ–Ω–∏ —Ä–∞–≤–Ω–æ 1.
# –ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é quick_power, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å
# –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –≤–∞—à–µ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤—ã–≤–µ–¥–∏—Ç–µ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ quick_power —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ a –∏ n  –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ
# State: a=<value>, n=<value>


def quick_power(a: int, n: int) -> int:
    print(f"State: a={a}, n={n}")
    if n == 0:
        return 1
    elif n % 2 == 0:
        half_power = quick_power(a, n // 2)
        return half_power * half_power
    else:
        return a * quick_power(a, n - 1)


print(quick_power(3, 4))
