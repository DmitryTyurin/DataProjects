# Студент-программист поспешил и неправильно написал программу. Теперь он имеет дело с ошибкой
#
# TypeError: print_args() missing 3 required positional arguments: 'b', 'c', and 'd'
#
# Помогите ему исправить вызов функции, так чтобы print_args смогла отработать и вывести числа на экран
def print_args(a, b, c, d):
    print(a, b, c, d)


dct = {"a": 100, "b": 200, "c": 300, "d": 400}
print_args(**dct)


# Напишите функцию concatenate(), которая принимает произвольное число именованных аргументов и объединит их  в одну большую строку без разделителей.
#
# Вам необходимо написать только определение функции concatenate
#
# Обратите внимание, что передаваемые значения могут быть различных типов данных
def concatenate(**kwargs):
    return "".join(str(value) for value in kwargs.values())


# Напишите функцию create_actor, которая принимает произвольное количество именованных аргументов и возвращает словарь с характеристиками актера. Если функции create_actor не передавать никаких аргументов, то она должна возвращать базовый словарь с ключами name, surname, age. Вот так он выглядит:
#
# create_actor() -> {
#         'name': 'Райан',
#         'surname': 'Рейнольдс',
#         'age': 47,
#     }
# Если передавать именованные параметры, которые отсутствуют в базовом словаре, они дополняются к этому словарю
#
# create_actor(height=190, movies=['Дедпул', 'Главный герой']) => {
#     'name': 'Райан',
#     'surname': 'Рейнольдс',
#     'age': 47,
#     'height': 190,
#     'movies': ['Дедпул', 'Главный герой']
# }
# Если передавать именованные параметры, которые совпадают с ключами базового словаря, то значения в словаре должны заменяться переданными значениями:
#
# create_actor(name='Jack', age=20) -> {
#         'name': 'Jack',
#         'surname': 'Рейнольдс',
#         'age': 20,
#     }
# Вам необходимо написать только определение функции create_actor


def create_actor(**kwargs):
    base_actor = {
        "name": "Райан",
        "surname": "Рейнольдс",
        "age": 47,
    }
    return {**base_actor, **kwargs}


# Напишите функцию info_kwargs, которая принимает произвольное количество именованных аргументов.
#
# Функция info_kwargs должна распечатать именованные аргументы в каждой новой строке в виде пары <Ключ> = <Значение>, причем ключи должны следовать в алфавитном порядке.
#
# Вам необходимо написать только определение функции info_kwargs


def info_kwargs(**kwargs):
    for key, value in sorted(kwargs.items()):
        print(f"{key} = {value}")
