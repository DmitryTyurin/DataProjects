# Панграмма — это предложение, которое содержит все буквы алфавита хотя бы один раз.
# В нашем задании мы будем рассматривать в качестве алфавита буквы английского языка.
# Тогда одним из примеров панграммы будет фраза «The quick brown fox jumps over the lazy dog».
# Ваша задача здесь — написать функцию is_pangram для проверки предложения на предмет того,
# является ли оно панграммой или нет. Для проверок внутри функции вы можете пользоваться глобальной переменной alpha.
# Символы, которые не являются буквами, необходимо игнорировать.


def is_pangram(sentence):
    alpha = "abcdefghijklmnopqrstuvwxyz"
    for char in alpha:
        if char not in sentence.lower():
            return False
    return True


# Rövarspråket (со шведского переводится как «язык разбойника») - шведская языковая игра. Она стала популярной
# после книг Астрид Линдгрен о Билле Бергсоне, где дети используют ее в качестве кода, как в игре, так и при
# раскрытии настоящих преступлений.
# Формула кодирования проста: каждая согласная удваивается, а между ними вставляется буква o.
# Гласные остаются нетронутыми.
# Тогда согласно этим правилам слово stubborn превратится в sostotubobboborornon
# Ваша задача написать функцию translate_to_robber_lang(), которая будет переводить текст на «язык разбойника» (по-шведски ).
# Все символы, которые не являются буквами, должны оставаться без изменения.
# Гласными будем считать буквы ['a','e', 'i', 'o', 'u']


def translate_to_robber_lang(text):
    vowels = ["a", "e", "i", "o", "u"]
    return "".join(
        char + "o" + char if char.lower() not in vowels and char.isalpha() else char
        for char in text
    )


# Автоматизируем ресторан: вакантные столы
# К нам обратились работники одного известного ресторана с просьбой написать приложение, которое позволяет автоматизировать процесс резервации столов. Одним из этапов процесса является определение свободных столов, чтобы затем можно было их предложить забронировать клиентам.
#
# Всего в ресторане имеется 9 столиков. Информация о брони хранится в глобальной переменной tables в словаре следующего формата
#
# tables = {
#   1: 'Andrey',
#   2: None,
#   3: None,
#   4: None,
#   5: None,
#   6: None,
#   7: None,
#   8: None,
#   9: None,
# }
# Ключи здесь - номера столов, значения - имена клиентов, если бронь имеется, иначе None.
#
# По текущему состоянию бронирования видно, что только столик под номером 1 занят Андреем, все остальные столики свободны. Значение None является признаком того, что столик никем не занят.
#
# Ваша задача написать две функции, которые помогут определять какие столы сейчас свободны:
#
#     ✔  функцию is_table_free, которая принимает номер стола и возвращает ответ на вопрос: «Свободен ли данный стол?» в виде булева значения
#
#     ✔ функцию get_free_tables, которая вернет список всех свободных столов.


tables = {
    1: "Andrey",
    2: None,
    3: None,
    4: None,
    5: None,
    6: None,
    7: None,
    8: None,
    9: None,
}


def is_table_free(table_number):
    return tables[table_number] is None


def get_free_tables():
    return [table_number for table_number, table in tables.items() if table is None]


# Продолжаем автоматизировать работу ресторана. Следующий этапом является резервация(закрепление) свободного столика за клиентом и отмена брони. Структура хранения резерваций все та же в виде словаря:
#
# tables = {
#   1: 'Andrey',
#   2: None,
#   3: None,
#   4: None,
#   5: None,
#   6: None,
#   7: None,
#   8: None,
#   9: None,
# }
# Ваша задача написать две функции, которые помогут создавать и удалять бронирование:
#
#     ✔  функцию reserve_table, которая принимает номер стола и имя клиента, проверяет свободен ли указанный столик и если за ним никто не прикреплен, вносятся данные клиента. Больше данная функция ничего не делает. Для реализации этой функции можете воспользоваться функцией is_table_free из задания «Автоматизируем ресторан: вакантные столы»
#
#     ✔ функцию delete_reservation, которая очищает запись о бронировании.


def is_table_free(table_number):
    return tables[table_number] is None


def reserve_table(table_number, client_name):
    if is_table_free(table_number):
        tables[table_number] = client_name


def delete_reservation(table_number):
    tables[table_number] = None


# Через некоторое время менеджеры ресторана поняли, что помимо имени клиента, они бы еще хотели хранить его принадлежность к статусу VIP клиента. Соответственно, они бы хотели изменить структуру хранения резерваций на следующую:
#
# tables = {
#     1: {'name': 'Andrey', 'is_vip': True},
#     2: None,
#     3: None,
#     4: None,
#     5: {'name': 'Vasiliy', 'is_vip': False},
#     6: None,
#     7: None,
#     8: None,
#     9: None,
# }
# Здесь мы видим, что информация о клиенте хранится во вложенном словаре, у которого имеется два ключа name и is_vip.
#
# Исходя из новой структуры данных, ваша задача теперь сделать рефакторинг кода функции reserve_table. Теперь она должна принимать не два аргумента, а три: номер стола, имя клиента и статус VIP. Делать проверку свободен и если она пройдена, сохранять данные в описанной выше структуре
#
#
#
# Для успешного прохождения тестов скопируйте также реализацию функции delete_reservation  из задания «Резервация столов» и все ее зависимости от других функций, если они были


def is_table_free(table_number):
    return tables[table_number] is None


def reserve_table(table_number, client_name, is_vip):
    if is_table_free(table_number):
        tables[table_number] = {"name": client_name, "is_vip": is_vip}


def delete_reservation(table_number):
    tables[table_number] = None
