# Напишите функцию get_info_about_object, которая принимает объект и выводит информацию обо всех его атрибутах и методах в следующем формате:
# сперва выводится список всех атрибутов и методов
# на следующей строке фраза «Всего у объекта {count} атрибутов и методов»
# Примечание: тестирование на платформе будет производится на версии Python 3.10, поэтому не переживайте, если вы используете у себя на устройстве другую версию python и у вас не совпадает вывод.
def get_info_about_object(obj):
    attr_list = []
    for attr in dir(obj):
        attr_list.append(attr)

    count = len(dir(obj))

    print(f"{attr_list}\nВсего у объекта {count} атрибутов и методов")


# Напишите функцию check_exist_attrs, которая принимает объект obj и список строк, в котором хранятся имена атрибутов.
# Функция check_exist_attrs должна вернуть словарь, в котором ключами будут являться имена атрибутов из переданного списка. Напротив каждого ключа должно быть булево значение: True, когда атрибут присутствует в объекте obj , в обратном случае - False.
# Ключи в итоговом словаре необходимо создавать в порядке следования имен атрибутов во входном списке


def check_exist_attrs(obj, attrs):
    return {attr: hasattr(obj, attr) for attr in attrs}


# Напишите функцию create_attrs, которая принимает объект obj и список кортежей. Каждый кортеж состоит из пары значений: имя атрибута в виде строки и его будущее значение.
# Задача функции create_attrs создать на основании внутренних кортежей списка новые атрибуты к переданному объекту.
# Для проверки работоспособности программы скопируйте реализацию функции check_exist_attrs из предыдущего задания


def check_exist_attrs(obj, attrs):
    return {attr: hasattr(obj, attr) for attr in attrs}


def create_attrs(obj, attr_tuples):
    for attr_name, value in attr_tuples:
        setattr(obj, attr_name, value)

# Ваша задача написать функцию count_strings, которая принимает произвольное количество аргументов. Функция должна среди всех переданных значений найти только строки, найти их количество и  вернуть в качестве результата.
# Ваша задача написать только определение функции count_strings

def count_strings(*args):
    return sum(isinstance(arg, str) for arg in args)

# Ваша задача написать функцию find_keys, которая принимает произвольное количество именованных аргументов. Функция должна отобрать только те имена параметров, у которых значения являются списками или кортежами. Функция find_keys должна собрать все имена таких параметров в список, отсортировать их по алфавиту вне зависимости от регистра букв и вернуть в качестве результата.
# Ниже представлены примеры:
# find_keys(t=[4, 5], W=[5, 3], A=(3, 2), a={2, 3}, b=[4]) => ['A', 'b', 't', 'W']
# find_keys(name='Bruce', surname='Wayne') => []
# find_keys(marks=[4, 5], name='ashle', surname='Brown', age=20, Also=(1, 2)) => ['Also', 'marks']
# Ваша задача написать только определение функции find_keys

def find_keys(**kwargs):
    return sorted([key for key, value in kwargs.items() if isinstance(value, (list, tuple))])