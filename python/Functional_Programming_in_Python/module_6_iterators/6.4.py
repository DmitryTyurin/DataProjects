# Перед вами два списка одинаковой длины keys и values
# Ваша задача создать словарь, в котором пара ключ-значение берется из значений списков, стоящих на одинаковых индексах. В качестве ответа выведите полученный словарь
keys = [
    "Ten",
    "Twenty",
    "Thirty",
    "Forty",
    "Fifty",
    "Sixty",
    "Seventy",
    "Eighty",
    "Ninety",
    "One hundred",
]
values = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

dictionary = dict(zip(keys, values))

print(dictionary)


# Напишите функция create_info, которая имеет следующие параметры
#
#     —  employees содержит имена работников в виде списка  (можете переименовать параметр по своему усмотрению)
#
#     —  identifiers содержит уникальные идентификаторы работников  (можете переименовать параметр по своему усмотрению)
#
# Функция create_info на основании параметров employees и identifiers должна создать словарь, ключами которого являются идентификаторы, а значениями - имена сотрудников. Соединение идентификатора и имени сотрудника должно выполняться по следующей логике:
#
# Выбирается самый маленький идентификатор из списка identifiers
# Выбирается первое имя по алфавиту из списка employees
# Создается пара ключ-значение.
# Процесс повторяется со следующими значениями. Берется второй по старшинству идентификатор и второе имя по алфавиту, создается пара в словаре и вновь повторяем процесс
# Итоговый словарь функция create_info должна вернуть в качестве результата.


def create_info(employees: list, identifiers: list) -> dict:
    return dict(zip(sorted(identifiers), sorted(employees)))


# Напишите функцию zip_with_function(), которая принимает список списков и функцию, которая принимает несколько аргументов и возвращает значение. Функция zip_with_function() должна использовать функцию zip() для объединения списков в кортежи, а затем применять заданную функцию к кортежам из соответствующих позиций каждого списка.
# Результатом должен быть новый список, содержащий значения, возвращаемые функцией для каждой комбинации элементов.
# Например, имеется функция
# def get_sum_two_numbers(a, b):
#     return a + b
# Тогда вызов
#
# zip_with_function([[1, 2, 4], [3, 5, 8]], get_sum_two_numbers)
# должен вернуть список [4, 7, 12].
#
# Ваша задача написать только определение функции zip_with_function
def zip_with_function(lists: list, function: callable) -> list:
    return [function(*list) for list in zip(*lists)]


# За все время обучения студенты сдают массу экзаменов и получают за них оценки. Университет решил собрать информацию о лучшей оценке у каждого студента. Ваша задача написать программу, которая проанализирует результаты всех экзаменов и найдет для каждого студента лучший балл
#
# Напишите функция get_info_marks, которая имеет следующие параметры:
#
#     —  students содержит имена студентов в виде списка (можете переименовать параметр по своему усмотрению). Это обязательный параметр;
#
#     —  marks - произвольное количество списков, в которых содержатся оценки (можете переименовать параметр по своему усмотрению).
#
# Функция get_info_marks должна найти лучшую оценку для каждого студента и составить из этих данных словарь, где ключ - имя студента, значение - лучшая оценка.
#
# Что касается оценок, это представляет собой несколько списков из целых чисел. Каждый список содержит оценки для студентов за один конкретный экзамен. По месту оценки в списке определяется, к какому студенту она относится.


def get_info_marks(lst, *marks):
    return dict(zip(lst, (max(i) for i in zip(*marks))))


# Усовершенствуйте функцию get_info_marks из предыдущего урока так, чтобы она возвращала словарь, в котором для каждого студента формируется словарь, хранящий информацию как о лучшей оценке студента(ключ «best»), так и худшей (ключ «worst»)
# Параметры функции остаются неизменными.
def get_info_marks(lst, *marks):
    return dict(zip(lst, (dict(best=max(i), worst=min(i)) for i in zip(*marks))))
