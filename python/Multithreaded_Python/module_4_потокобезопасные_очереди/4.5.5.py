# У магазина электроники, имеющего небольшой склад, часто возникали проблемы с поставщиком. Периодически поставщик доставлял товар, когда склад был заполнен. Поэтому владелец магазина заказал вам приложение для синхронизации движения товара на складе своего магазина со складом поставщика.
#
# Ваша задача разработать приложение, которое бы наладило своевременные поставки товара на склад магазина.
#
# Ключевые моменты приложения:
#
# Напишите функцию, которая при поставке товара (добавлении в очередь) на склад магазина будет уведомлять:
# Поставлен товар: <товар>
# Если склад магазина после поставки оказывается заполненным:
# Склад временно заполнен
# В случае, когда поставщик доставит все заказанные товары:
# Поставки закончились
# Напишите функцию, которая при продаже (извлечении из очереди) товара будет уведомлять:
# Продан товар: <товар>
# Запустите в двух разных потоках те функции, которые создали ранее.
# Важные аспекты:
#
# Нужно принять к сведению, что изначально склад продавца пуст и может вместить только 5 товаров;
# Если склад пуст, то поставка товара начинается сразу и повторяется каждые полчаса (0.5 секунды в программе);
# Если склад полностью заполнен, попытка следующей поставки должна быть предпринята так же через полчаса;
# Продажа товара происходит каждый час (1 час = 1 секунда в программе). Самая первая продажа происходит через час после начала работы;
# Порядок продаж товаров соответствует очередности поступления их на склад магазина;
# Поставщик обязался доставить следующий список товаров:
# electronics = ["смартфон", "ноутбук", "планшет", "камера", "гарнитура",
#                "телевизор", "гаджет", "монитор", "роутер", "плеер"]
# Будьте внимательны:
#
# В этой задаче необходимо выбрать подходящий тип очереди, учитывая следующие факторы:
#
# Первыми на продажу отправятся товары первыми поступившие на склад.
# Склад продавца ограничен.

from concurrent.futures import ThreadPoolExecutor, wait
import threading
import queue
import time

electronics = [
    "смартфон",
    "ноутбук",
    "планшет",
    "камера",
    "гарнитура",
    "телевизор",
    "гаджет",
    "монитор",
    "роутер",
    "плеер",
]


class StoreInventory:
    def __init__(self, electronics: list):
        self.electronics = electronics
        self.queue = queue.Queue(maxsize=5)
        self.lock = threading.Lock()
        self.executor = ThreadPoolExecutor(max_workers=2)

    def supplier(self):
        for item in self.electronics:
            while True:
                try:
                    self.queue.put(item, timeout=0.5)
                    with self.lock:
                        print(f"Поставлен товар: {item}")

                    if self.queue.full():
                        print("Склад временно заполнен")
                        break

                except queue.Full:
                    time.sleep(0.5)
                    continue

            time.sleep(0.5)

        with self.lock:
            print("Поставки закончились")

    def seller(self):
        time.sleep(1)

        while not self.queue.empty():
            try:
                item = self.queue.get(timeout=1)

                with self.lock:
                    print(f"Продан товар: {item}")

                self.queue.task_done()
                time.sleep(1)

            except queue.Empty:
                break

    def run(self):
        with self.executor as executor:
            futures = [executor.submit(self.supplier), executor.submit(self.seller)]
            wait(futures, return_when="ALL_COMPLETED")


inventory = StoreInventory(electronics)
inventory.run()
