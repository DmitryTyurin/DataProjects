# Цель: Создать симуляцию аукциона, где ставки увеличиваются каждые N секунд.
#
# Данные:
#
# Для решения задачи вам потребуются следующие переменные, которые вшиты в задачу, необходимые начальные значения уже установлены, вам необходимо только использовать их в правильном месте.
#
# Исходная ставка, шаг ставки, максимальная ставка, интервал времени N:
#
# # Инициализация параметров аукциона
#
# initial_bid =      # Начальная ставка аукциона. С этой суммы начинается аукцион.
# bid_increment =    # Сумма, на которую увеличивается текущая ставка на каждом шаге аукциона.
# max_bid =          # Максимальная ставка, при достижении которой аукцион завершается.
# interval =         # Интервал времени (в секундах) между увеличениями ставок.
#
# Задание:
#
# Написать функцию increase_bid(), которая увеличивает текущую ставку на фиксированную сумму bid_increment.
# Использовать threading.Timer для увеличения ставки каждые N секунд interval.
# Выводить текущую ставку после каждого увеличения.
# print(f"Текущая ставка: {initial_bid} у.е.")
# Остановить аукцион после достижения максимальной ставки max_bid .
# Остановка Аукциона:
#
# Как только текущая ставка достигнет или превысит max_bid, программа должна остановить процесс увеличения ставок и вывести сообщение о завершении аукциона.
# print('Ставок нет, аукцион завершен!')
#
#
# Использование threading.Timer:
#
# В функции increase_bid, используйте threading.Timer для повторного создания и вызова increase_bid с новой ставкой после заданного интервала времени interval.

import threading

# Инициализация параметров аукциона
initial_bid = 100  # Начальная ставка аукциона
bid_increment = 10  # Шаг увеличения ставки
max_bid = 200  # Максимальная ставка
interval = 2  # Интервал между ставками (в секундах)


class AuctionProcess:
    def __init__(self):
        self.initial_bid = initial_bid
        self.timer = None

    def increase_bid(self):
        self.initial_bid += bid_increment
        print(f"Текущая ставка: {self.initial_bid} у.е.")

        if self.initial_bid >= max_bid:
            self.stop_auction()
        else:
            self.start_auction()

    def start_auction(self):
        self.timer = threading.Timer(interval, self.increase_bid)
        self.timer.start()

    def stop_auction(self):
        self.timer.cancel()
        print("Ставок нет, аукцион завершен!")


def main():
    auction = AuctionProcess()
    auction.start_auction()


main()
