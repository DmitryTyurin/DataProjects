# Напишите многопоточный код для обработки чисел из нескольких списков. Каждое число в списке должно быть умножено на 2, с имитацией задержки 0.2 сек на каждой операции.
# Используйте ThreadPoolExecutor и as_completed для управления потоками и отслеживания результатов.
#
# У вас есть список списков с числами, которые должны обрабатываться.
#
# Написание функции обработки числа:
#
# Функция process_number(number) принимает число, умножает его на 2, имитирует задержку в 0.2 секунды и возвращает результат.
# Использование ThreadPoolExecutor для конкурентной обработки:
#
# Инициализируйте ThreadPoolExecutor с определенным количеством рабочих потоков (рекомендуется, 10).
# Используйте метод submit() для отправки задачи обработки каждого числа из всех списков в пул потоков. Сохраните возвращаемые объекты Future в списке.
# Применение as_completed() для отслеживания завершения задач:
#
# Итерируйтесь через объекты Future, используя as_completed(), чтобы получить результаты задач по мере их завершения.
# Вывод суммы чисел:
#
# После завершения всех задач, выведите сумму обработанных чисел списка который был обработан быстрее остальных.
# Вывод программы должен быть следующим:
# Сумма чисел в первом обработанном списке: 11090
#
# print(f"Сумма чисел в первом обработанном списке: {first_list_sum}")

from concurrent.futures import ThreadPoolExecutor, as_completed, wait
from time import sleep

lists = [
    [175, 790, 103, 479, 433, 406, 510, 377, 184, 777, 990, 321],
    [
        466,
        538,
        210,
        881,
        873,
        411,
        856,
        965,
        537,
        243,
        749,
        229,
        545,
        312,
        651,
        342,
        328,
        152,
        473,
        479,
        257,
        899,
        362,
        584,
        888,
    ],
    [
        393,
        488,
        955,
        771,
        536,
        922,
        182,
        564,
        581,
        998,
        556,
        813,
        482,
        940,
        947,
        267,
        721,
        944,
        820,
        993,
    ],
    [
        691,
        532,
        354,
        831,
        241,
        724,
        547,
        580,
        191,
        742,
        263,
        149,
        661,
        804,
        819,
        246,
        519,
        698,
    ],
    [373, 235, 860, 591, 592, 227, 455, 113, 426, 181, 741, 723, 998, 667, 827],
    [
        924,
        880,
        704,
        133,
        538,
        795,
        364,
        687,
        775,
        925,
        445,
        659,
        883,
        620,
        391,
        836,
        779,
        617,
        528,
        914,
        424,
    ],
    [324, 643, 171, 208, 330, 306, 559, 927, 871, 284, 438, 644, 447, 893, 287],
    [
        993,
        788,
        192,
        169,
        549,
        162,
        324,
        213,
        277,
        376,
        391,
        243,
        749,
        229,
        545,
        516,
        260,
        798,
    ],
    [
        497,
        971,
        765,
        137,
        543,
        498,
        583,
        649,
        558,
        488,
        882,
        907,
        589,
        151,
        724,
        689,
        134,
        492,
        124,
        114,
        147,
        734,
        524,
        658,
        441,
        908,
        192,
        240,
    ],
    [
        575,
        873,
        922,
        950,
        375,
        555,
        351,
        582,
        659,
        629,
        619,
        851,
        661,
        804,
        819,
        246,
        519,
        698,
        286,
        639,
        593,
        773,
        157,
    ],
]


class ProcessNumber:
    def __init__(self, numbers_list: list):
        self.numbers = numbers_list
        self.executor: ThreadPoolExecutor = ThreadPoolExecutor(max_workers=10)
        self.first_list_sum: int = 0

    @staticmethod
    def process_number(number_list: list[int]):
        sleep(0.2)  # Имитация задержки
        return [number * 2 for number in number_list]

    def run(self):
        with self.executor as executor:
            futures = [
                executor.submit(self.process_number, number) for number in self.numbers
            ]

            for future in as_completed(futures):
                self.first_list_sum = sum(future.result())
                print(
                    f"Сумма чисел в первом обработанном списке: {self.first_list_sum}"
                )

                break


process_number = ProcessNumber(lists)
process_number.run()
