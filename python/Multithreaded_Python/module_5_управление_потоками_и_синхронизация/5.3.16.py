# Цель: Симулировать аукцион, где все участники (реализованные как потоки) делают ставки на все уникальные предметы. Аукцион начинается после сигнала от аукциониста и включает в себя два лота: "редкую картину" и "антикварные часы".
#
#
# Задача:
#
# Вывести сообщения о начале и завершении аукциона .
# print("Аукцион за редкую картину начинается!")
# print("Аукцион за редкую картину завершился!")
#
# print("Аукцион за антикварные часы начинается!")
# print("Аукцион за антикварные часы завершился!")
#
#
# Создать несколько потоков, каждый из которых представляет участника аукциона.
# print(f"Участник {name} готов к аукциону за редкую картину.")
# print(f"Участник {name} готов к аукциону за антикварные часы.")
# Участники ожидают сигнала о начале аукциона. Аукцион начинается отдельно для каждого лота (одновременно).
# Как только аукцион начинается, участники начинают делать ставки на предметы.
# Аукцион завершается после 3 сек, и аукционист объявляет победителя для каждого лота.
# Данные:
#
# Список предметов аукциона(можно захардкодить в принт).
# print(f"Победитель аукциона за антикварные часы: {winner_clock}")
# print(f"Победитель аукциона за редкую картину: {winner_painting}")
# Список участников аукциона из прошлой задачи.
# # Имена участников аукциона
# bidder_names = ["Сергей", "Борис", "Виктор", "Евдоким", "Егор"]
# Ожидание Начала Аукциона:
#
# Каждый участник (поток) выводит сообщение о готовности к аукциону.
#
# Участник Сергей готов к аукциону.
# print(f"Участник {name} готов к аукциону за редкую картину.")
#
# Участник Виктор готов к аукциону за антикварные часы.
# print(f"Участник {name} готов к аукциону за антикварные часы.")
# Начало Ставок:
#
# По сигналу аукциониста, участники начинают делать ставки, с выводом соответствующего сообщения.
#
# print(f"Участник {name} делает ставку на редкую картину.")
# Объявление Победителей:
#
# Аукционист объявляет победителей для каждого лота.
#
# print(f"Победитель аукциона за редкую картину: {winner_painting}")
# print(f"Победитель аукциона за антикварные часы: {winner_clock}")
#
#
# Техническая Реализация:
# События используются для координации начала и конца аукциона.
# Случайный выбор победителей осуществляется после завершения ставок.
# Участники (потоки) ожидают сигнала (.wait()) для начала аукциона, после чего делают ставки (имитация задержки с помощью time.sleep()).
# Победитель каждого аукциона выбирается случайным образом (random.choice()).

from concurrent.futures import ThreadPoolExecutor
from threading import Thread, Event
from random import choice
import time

bidder_names = ["Сергей", "Борис", "Виктор", "Евдоким", "Егор"]


class ProcessBidder:
    def __init__(self, names: list):
        self.names = names
        self.executor = ThreadPoolExecutor(max_workers=len(self.names))
        self.auction_start_painting = Event()
        self.auction_start_clock = Event()
        self.auction_end = Event()
        self.winner_auction_painting = None
        self.winner_auction_clock = None
        self.random_winner = lambda: choice(self.names)

    def bidder(self, name: str):
        print(f"Участник {name} готов к аукциону за редкую картину.")
        print(f"Участник {name} готов к аукциону за антикварные часы.")

        self.auction_start_painting.wait()
        self.auction_start_clock.wait()

        if self.auction_end.is_set():
            return

        else:
            print(f"Участник {name} делает ставку на редкую картину.")
            print(f"Участник {name} делает ставку на антикварные часы.")

    def start_auction(self, lot: str, event: Event):
        print(f"Аукцион за {lot} начинается!")

        event.set()
        time.sleep(3)

        print(f"Аукцион за {lot} завершился!")

        print(f"Победитель аукциона за {lot}: {self.random_winner()}")

    def run(self):
        with self.executor as executor:
            futures = executor.map(self.bidder, self.names)

            self.start_auction("редкую картину", self.auction_start_painting)
            self.start_auction("антикварные часы", self.auction_start_clock)

            self.auction_end.set()


process = ProcessBidder(bidder_names)
process.run()
