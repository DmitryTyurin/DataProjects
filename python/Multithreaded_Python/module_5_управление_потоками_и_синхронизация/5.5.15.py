# Ваша задача - написать код, который имитирует работу кафе с тремя доступными столиками. Каждый клиент, приходящий в кафе, пытается занять один из свободных столиков. Если все столики заняты, клиент должен подождать, пока не освободится место.
#
# Требования к Реализации
# Используйте объект threading.Semaphore с максимальным значением 3. Это значение означает количество столиков в кафе. Семафор будет контролировать доступ потоков к столикам.
#
# Используйте список имен из списка, которые будут использоваться для имитации различных клиентов кафе.
#
# # Список уникальных имен клиентов
# name_list = [
#     "Клиент Веселый Шутник",
#     "Клиент Читающий Поэт",
#     "Клиент Спешащий Бизнесмен",
#     "Клиент Мечтающий Путешественник",
#     "Клиент Меланхоличный Художник",
#     "Клиент Загадочная Улыбка",
#     "Клиент Задумчивый Философ",
#     "Клиент Вечно Опаздывающий",
#     "Клиент Гадающий на Кофейной Гуще",
#     "Клиент Неугомонный Блогер"
# ]
# Функция клиента: Напишите функцию client(), которая будет вызываться каждым потоком. Эта функция должна:
#
# Получить уникальное имя клиента из списка.
# "Занять столик" в кафе, используя семафор (with cafe_semaphore:) и вывести сообщение
# Клиент Веселый Шутник нашел свободный столик и заказывает кофе
# print(f"{client_name} нашел свободный столик и заказывает кофе")
# Вывести сообщения о действиях когда он освобождает столик.
# Клиент Загадочная Улыбка насладился кофе и освобождает столик для следующих гостей
# print(f"{client_name} насладился кофе и освобождает столик для следующих гостей")
# Запустите несколько потоков (например, 10), каждый из которых представляет клиента, пытающегося занять столик в кафе.
#
# Вывод программы должен быть следующим:
#
# Клиент Веселый Шутник нашел свободный столик и заказывает кофе
# Клиент Читающий Поэт нашел свободный столик и заказывает кофе
# ....
# ...
# Клиент Гадающий на Кофейной Гуще насладился кофе и освобождает столик для следующих гостей
# Клиент Неугомонный Блогер нашел свободный столик и заказывает кофе
# Клиент Неугомонный Блогер насладился кофе и освобождает столик для следующих гостей

from concurrent.futures import ThreadPoolExecutor
from threading import Semaphore, Lock
import time


class CoffeeCafe:
    def __init__(self):
        self.name_list: list = [
            "Клиент Веселый Шутник",
            "Клиент Читающий Поэт",
            "Клиент Спешащий Бизнесмен",
            "Клиент Мечтающий Путешественник",
            "Клиент Меланхоличный Художник",
            "Клиент Загадочная Улыбка",
            "Клиент Задумчивый Философ",
            "Клиент Вечно Опаздывающий",
            "Клиент Гадающий на Кофейной Гуще",
            "Клиент Неугомонный Блогер",
        ]
        self.semaphore: Semaphore = Semaphore(3)
        self.executor: ThreadPoolExecutor = ThreadPoolExecutor(max_workers=10)
        self.lock: Lock = Lock()

    def process_coffee(self, client_name: str):
        with self.semaphore:
            with self.lock:
                print(f"{client_name} нашел свободный столик и заказывает кофе")
                print(
                    f"{client_name} насладился кофе и освобождает столик для следующих гостей"
                )

    def run(self):
        with self.executor as executor:
            executor.map(self.process_coffee, self.name_list)


cafe = CoffeeCafe()
cafe.run()
