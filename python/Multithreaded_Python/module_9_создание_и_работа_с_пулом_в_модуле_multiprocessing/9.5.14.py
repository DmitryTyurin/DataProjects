# Напишите скрипт, который параллельно обрабатывает 1000 текстовых файлов из архива, в каждом из которых записано число. Задача скрипта — подсчитать общую сумму чисел из всех файлов и вывести результат.
#
#
#
# Архив с файлами - скачать
#
#
# Детали задачи:
# Вам предоставляется архив, содержащий 1000 текстовых файлов. Каждый файл содержит одно число.
# Ваша задача — написать многопроцессный код, который извлечет и прочитает все файлы из архива, вычислит сумму чисел, содержащихся в этих файлах, и выведет общую сумму.
# print(f"Общая сумма чисел в файлах: {total_sum}")
#
# Общая сумма чисел в файлах: ***
# Для обработки файлов используйте многопроцессность с помощью функции map().
# Важно обеспечить многопроцессную обработку файлов, чтобы максимизировать эффективность выполнения задачи на многоядерных процессорах.
# Инструкция по выполнению:
# Создайте функцию read_and_sum(filename), которая принимает путь к файлу, читает его содержимое, предполагая, что каждая строка файла содержит число. Функция должна возвращать сумму этих чисел.
# Создайте функцию sum_numbers_in_files(directory), которая принимает путь к директории с текстовыми файлами. Функция должна:
# Найти все текстовые файлы в указанной директории.
# Использовать объект Pool для параллельного выполнения функции read_and_sum на каждом файле.
# Собрать результаты работы и подсчитать общую сумму чисел из всех файлов.
# Выведите результат выполнения на экран с помощью:
# print(f"Общая сумма чисел в файлах: {total_sum}")
#
# Общая сумма чисел в файлах: ***
# Ожидаемый результат:
# В консоли должно быть выведено сообщение вида: "Общая сумма чисел в файлах: X", где X — это общая сумма чисел, найденных во всех обработанных файлах. При этом, весь код на Степик вставлять не нужно, необходимо вставить только print() с соответствующим числом.


from multiprocessing import Pool, freeze_support
import zipfile
import os


class ZipReader:
    def __init__(self, folder_name: str):
        self.folder_name = folder_name
        self.current_dir = os.getcwd()
        self.folder_path = os.path.join(os.getcwd(), folder_name)
        self.pool = Pool(4)

    @staticmethod
    def read_and_sum(file_path):
        with open(file_path, "r") as f:
            return sum(int(line.strip()) for line in f if line.strip().isdigit())

    def process_files(self):
        files = [
            os.path.join(self.folder_path, file_name)
            for file_name in os.listdir(self.folder_path)
            if file_name.endswith(".txt")
        ]
        with self.pool as pool:
            results = pool.map(self.read_and_sum, files)

        return sum(results)


if __name__ == "__main__":
    freeze_support()

    reader = ZipReader("output_files_8_4")
    result = reader.process_files()

    print(result)
