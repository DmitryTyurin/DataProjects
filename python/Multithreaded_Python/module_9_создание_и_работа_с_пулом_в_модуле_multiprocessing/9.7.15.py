# В этой задаче вам предстоит также поработать с архивом, содержащим 1000 файлов, но на этот раз файлы формата .json. Каждый файл содержит в себе данные о домах, такие как количество этажей, год постройки, тип материала, площадь квартир и другие важные характеристики. Ваша задача — обработать эти файлы, собрать статистику по заданным критериям и предоставить агрегированные результаты.
#
#
# Архив с файлами - скачать
# # Пример данных в файлах
# [
#     {
#         "Название": "Зимина и партнеры",
#         "Адрес": "ст. Курганинск, ш. Азовское, д. 7, 606663",
#         "Количество_этажей": 45,
#         "Количество_квартир": 315,
#         "Год_постройки": "2001",
#         "Тип_материала": "железобетон",
#         "Площадь_квартиры": 53,
#         "Количество_жителей": 98,
#         "Наличие_лифта": true,
#         "Наличие_охраны": true,
#         "Наличие_парковки": true,
#         "Расход_энергии_на_дом": 39159,
#         "Наличие_спортивного_зала": false,
#         "Расстояние_до_центра": 15,
#         "Расстояние_до_метро": 7,
#         "Расстояние_до_школы": 3
#     },
#     {
#         "Название": "Якушев Инкорпорэйтед",
#         "Адрес": "с. Агата, пер. Луговой, д. 79 к. 5, 572923",
#         "Количество_этажей": 34,
#         "Количество_квартир": 238,
#         "Год_постройки": "2017",
#         "Тип_материала": "железобетон",
#         "Площадь_квартиры": 124,
#         "Количество_жителей": 314,
#         "Наличие_лифта": true,
#         "Наличие_охраны": false,
#         "Наличие_парковки": false,
#         "Расход_энергии_на_дом": 20468,
#         "Наличие_спортивного_зала": true,
#         "Расстояние_до_центра": 5,
#         "Расстояние_до_метро": 6,
#         "Расстояние_до_школы": 4
#     },
#     {"...": "..."},
#     {"...": "..."},
#     {"...": "..."},
# ]
# Шаги выполнения:
#
# Для каждого JSON файла, вы должны извлечь данные о домах и обработать их, собирая определенную статистику, например, общее количество этажей, количество домов по типу материала, общую площадь квартир и так далее.
#
# Используйте пул потоков ThreadPool и функцию imap() для обработки данных из всех файлов. Это позволит эффективно использовать ресурсы компьютера и ускорить процесс обработки данных.
#
# После обработки всех файлов, агрегируйте полученные данные, чтобы сформировать итоговую статистику, включая проценты наличия определенных удобств в домах.
#
# # У вас должен получится аналогичный словарь с ключами и данными
# # Не забудьте округлить значения до 2х знаков после запятой
#
# nums = {
#     'Общее_количество_этажей': 000000,
#     'Общее_количество_квартир': 0000000,
#     'Количество_кирпичных_домов': 0000,
#     'Количество_железобетонных_домов': 0000,
#     'Количество_стеклянных_домов': 0000,
#     'Общая_площадь_всех_квартир': 0000000,
#     'Общее_количество_жителей': 0000000,
#     'Процент_наличия_лифта': 00.00,
#     'Процент_наличия_охраны': 00.00,
#     'Процент_наличия_парковки': 00.00,
#     'Процент_наличия_спортивных_залов': 00.00,
#     'Общий_расход_энергии_на_все_дома': 000000000
# }
# Для агрегации данных используется функция, которая обрабатывает список со статистикой по каждому файлу.
# 'Общее_количество_этажей': Сумма всех этажей во всех домах, во всех файлах.
#
#  'Общее_количество_квартир': Сумма всех квартир во всех домах и файлах.
#
# 'Количество_кирпичных_домов': Считается количество домов, материал которых указан как "кирпич". Если в описании дома тип материала соответствует "кирпич", то такой дом учитывается в этой категории.
#
# 'Количество_железобетонных_домов': Аналогично подсчитывается количество домов с типом материала "железобетон".
#
# 'Количество_стеклянных_домов': Подсчет домов, для которых тип материала указан как "стекло".
#
# 'Общая_площадь_всех_квартир': Сумма площадей всех квартир в каждом доме во всех файлах.
#
# 'Общее_количество_жителей': Сумма всех жителей во всех домах во всех файлах. Количество жителей в каждом доме суммируется для получения общего числа.
#
# 'Процент_наличия_лифта': Вычисляется как отношение количества домов с лифтом к общему числу домов, умноженное на 100. Это дает процент домов, оборудованных лифтом.
#
# 'Процент_наличия_охраны': Аналогично подсчитывается для домов с охраной: отношение количества домов с охраной к общему числу домов, умноженное на 100.
#
# 'Процент_наличия_парковки': Вычисляется как отношение домов с парковкой к общему числу домов, выраженное в процентах.
#
# 'Процент_наличия_спортивных_залов': Отношение числа домов со спортивным залом к общему числу домов, умноженное на 100.
#
# 'Общий_расход_энергии_на_все_дома': Сумма расхода энергии по всем домам. Для каждого дома берется его расход энергии и суммируется для получения общего значения.
#
# !Вставьте в поле ответа только итоговый словарь. Пример такого словаря приведен ниже. Обратите внимание, что переносы строк не имеют значения.


import json
import os
from functools import reduce
from multiprocessing import freeze_support
from multiprocessing.pool import ThreadPool


class JsonReader:
    def __init__(self, folder_path: str):
        self.folder_path = folder_path
        self.file_paths = [
            os.path.join(folder_path, f)
            for f in os.listdir(folder_path)
            if f.endswith(".json")
        ]
        self.pool = ThreadPool()

    @staticmethod
    def read_json(file_path: str) -> dict:
        with open(file_path, "r", encoding="utf-8") as f:
            data = json.load(f)

        stats = {
            "total_floors": 0,
            "total_apartments": 0,
            "brick_houses": 0,
            "concrete_houses": 0,
            "glass_houses": 0,
            "total_area": 0,
            "total_residents": 0,
            "has_elevator": 0,
            "has_security": 0,
            "has_parking": 0,
            "has_gym": 0,
            "total_energy": 0,
            "total_houses": 0,
        }

        for house in data:
            stats["total_floors"] += house["Количество_этажей"]
            stats["total_apartments"] += house["Количество_квартир"]
            stats["total_area"] += (
                house["Площадь_квартиры"] * house["Количество_квартир"]
            )
            stats["total_residents"] += house["Количество_жителей"]
            stats["total_energy"] += house["Расход_энергии_на_дом"]

            material = house["Тип_материала"].lower()
            if "кирпич" in material:
                stats["brick_houses"] += 1
            elif "железобетон" in material:
                stats["concrete_houses"] += 1
            elif "стекло" in material:
                stats["glass_houses"] += 1

            stats["has_elevator"] += 1 if house["Наличие_лифта"] else 0
            stats["has_security"] += 1 if house["Наличие_охраны"] else 0
            stats["has_parking"] += 1 if house["Наличие_парковки"] else 0
            stats["has_gym"] += 1 if house["Наличие_спортивного_зала"] else 0

            stats["total_houses"] += 1

        return stats

    @staticmethod
    def add_dicts(a: dict, b: dict) -> dict:
        return {k: a[k] + b[k] for k in a}

    def aggregate_stats(self, stats_list: list):
        total_stats = reduce(self.add_dicts, stats_list)

        all_stats = {
            "Общее_количество_этажей": total_stats["total_floors"],
            "Общее_количество_квартир": total_stats["total_apartments"],
            "Количество_кирпичных_домов": total_stats["brick_houses"],
            "Количество_железобетонных_домов": total_stats["concrete_houses"],
            "Количество_стеклянных_домов": total_stats["glass_houses"],
            "Общая_площадь_всех_квартир": total_stats["total_area"],
            "Общее_количество_жителей": total_stats["total_residents"],
            "Процент_наличия_лифта": round(
                (total_stats["has_elevator"] / total_stats["total_houses"]) * 100, 2
            ),
            "Процент_наличия_охраны": round(
                (total_stats["has_security"] / total_stats["total_houses"]) * 100, 2
            ),
            "Процент_наличия_парковки": round(
                (total_stats["has_parking"] / total_stats["total_houses"]) * 100, 2
            ),
            "Процент_наличия_спортивных_залов": round(
                (total_stats["has_gym"] / total_stats["total_houses"]) * 100, 2
            ),
            "Общий_расход_энергии_на_все_дома": total_stats["total_energy"],
        }

        all_stats = json.dumps(all_stats, indent=4, ensure_ascii=False)

        return all_stats

    def process_file(self) -> dict:
        with self.pool as pool:
            stats_list = pool.map(self.read_json, self.file_paths)

        return self.aggregate_stats(stats_list)


if __name__ == "__main__":
    freeze_support()

    reader = JsonReader("buildings_data")
    aggregate_stats = reader.process_file()
    print(aggregate_stats)
