# Напишите код, который проведет параллельный анализ успеваемости учеников на основе предоставленных оценок по различным предметам. Код должен вычислить средний балл каждого ученика из словаря data={} и определить, соответствует ли его успеваемость установленному минимальному порогу. В случае, если средний балл ученика ниже порога в 2.0, программа должна генерировать исключение с помощью raise, указывая на необходимость внимания к данному студенту.
#
#
# # Полный словарь вшит в задачу
#
# data = {'Михей Валентинович Никонов': {'Математика': 3, 'Физика': 2, 'Химия': 2, 'История': 3, 'Биология': 3,
#                                        'География': 5, 'Информатика': 5, 'Литература': 5, 'Иностранный язык': 2,
#                                        'Физкультура': 2},
#         'Захарова Евгения Андреевна': {'Математика': 3, 'Физика': 3, 'Химия': 4, 'История': 4, 'Биология': 3,
#                                        'География': 3, 'Информатика': 5, 'Литература': 3, 'Иностранный язык': 5,
#                                        'Физкультура': 4},
#         'Петухова Ангелина Антоновна': {'Математика': 5, 'Физика': 3, 'Химия': 3, 'История': 4, 'Биология': 4,
#                                         'География': 3, 'Информатика': 4, 'Литература': 5, 'Иностранный язык': 5,
#                                         'Физкультура': 5},
#         'Селиверстова Любовь Семеновна': {'Математика': 5, 'Физика': 3, 'Химия': 2, 'История': 3, 'Биология': 5,
#                                           'География': 4, 'Информатика': 5, 'Литература': 5, 'Иностранный язык': 3,
#                                           'Физкультура': 4}}
# Задача:
#
# Создайте пул, минимум на 4 процесса Pool(4) .
# Обработайте данные каждого ученика в словаре data={}, используя pool.apply_async().
# Для каждого ученика вы должны:
# Вычислить средний балл на основе его оценок.
# Проверить, превышает ли средний балл минимальный порог успеваемости (2.0). Если средний балл ниже минимального порога, необходимо сгенерировать исключение ValueError с сообщением о неудовлетворительной успеваемости ученика.
# raise ValueError(f"Средний балл {student_name} ниже минимального порога: {average_grade}")
# Имитируйте время обработки задачи, равное среднему баллу ученика, используя time.sleep(average_grade). Это добавит реалистичности в обработку данных и покажет, как управлять задержками в асинхронном коде.
# Используйте функцию обратного вызова callback для вывода результата в случае успеха и функцию error_callback для обработки исключений.
# #Выводить сообщение в случае успеха
# Михей Валентинович Никонов: средний балл 3.2
#
# f"{student_name}: средний балл {average_grade}"
# Дождитесь завершения всех операций и закройте пул процессов.
# Вывод вашего кода должен быть примерно следующим (при 5 процессах в пуле).
# Михей Валентинович Никонов: средний балл 3.2
# Захарова Евгения Андреевна: средний балл 3.7
# Селиверстова Любовь Семеновна: средний балл 3.9
# Петухова Ангелина Антоновна: средний балл 4.1
# ...
# ...
# ...
# Средний балл Прохор Викторович Беспалов ниже минимального порога: 1.3
# ...
# ...
# ...
# Рюрик Гордеевич Сорокин: средний балл 4.2
# Евдоким Фомич Маслов: средний балл 3.7


from multiprocessing import Pool, freeze_support
import time

data = {
    "Михей Валентинович Никонов": {
        "Математика": 3,
        "Физика": 2,
        "Химия": 2,
        "История": 3,
        "Биология": 3,
        "География": 5,
        "Информатика": 5,
        "Литература": 5,
        "Иностранный язык": 2,
        "Физкультура": 2,
    },
    "Захарова Евгения Андреевна": {
        "Математика": 3,
        "Физика": 3,
        "Химия": 4,
        "История": 4,
        "Биология": 3,
        "География": 3,
        "Информатика": 5,
        "Литература": 3,
        "Иностранный язык": 5,
        "Физкультура": 4,
    },
    "Петухова Ангелина Антоновна": {
        "Математика": 5,
        "Физика": 3,
        "Химия": 3,
        "История": 4,
        "Биология": 4,
        "География": 3,
        "Информатика": 4,
        "Литература": 5,
        "Иностранный язык": 5,
        "Физкультура": 5,
    },
    "Селиверстова Любовь Семеновна": {
        "Математика": 5,
        "Физика": 3,
        "Химия": 2,
        "История": 3,
        "Биология": 5,
        "География": 4,
        "Информатика": 5,
        "Литература": 5,
        "Иностранный язык": 3,
        "Физкультура": 4,
    },
}


class AverageGrade:
    def __init__(self, data: dict):
        self.data = data
        self.pool = Pool(4)

    @staticmethod
    def process_student_info(student_name: str, grades: dict):
        average_grade = sum(grades.values()) / len(grades)
        time.sleep(average_grade)

        if average_grade < 2.0:
            raise ValueError(
                f"Средний балл {student_name} ниже минимального порога: {average_grade:.1f}"
            )

        return f"{student_name}: средний балл {average_grade:.1f}"

    @staticmethod
    def on_error(exception):
        print(exception)

    @staticmethod
    def on_success(result):
        print(result)

    def main(self):
        for student_name, grades in self.data.items():
            self.pool.apply_async(
                self.process_student_info,
                (
                    student_name,
                    grades,
                ),
                callback=self.on_success,
                error_callback=self.on_error,
            )

        self.pool.close()
        self.pool.join()


if __name__ == "__main__":
    freeze_support()

    average_grade = AverageGrade(data)
    average_grade.main()
