# Описание задачи:
# Напишите код обработки списка данных с использованием многопоточности. Код должен обрабатывать каждый элемент списка, имитируя возможность возникновения ошибки в процессе обработки. Задача включает в себя обработку исключений и отчет о результатах обработки каждого элемента.
#
# Программа должна корректно обрабатывать каждый элемент списка, учитывая возможность возникновения ошибок, и предоставлять отчет о результатах обработки каждого элемента.
#
# Подготовка данных для обработки:
#
# Список data генерируется с числовыми элементами от 1 до 20. Эти элементы представляют данные, которые необходимо обработать.
# # Список данных для обработки
# data = [i for i in range(1, 21)]
# Определение функции обработки данных:
#
# Реализуйте функцию process_data(item) в качестве основной функции для потоков, функция должна имитировать обработку данных из списка data. В этой функции используется генератор случайных чисел для имитации вероятности возникновения ошибки в 20% случаев. Если ошибка имитируется, функция должна генерировать исключение ValueError с сообщением об ошибке. В противном случае функция возвращает обработанный элемент.
# # Имитация функции обработки данных, которая может вызывать исключения
# def process_data(item):
#     # Имитация возможности возникновения ошибки
#     if random.random() < 0.2:  # 20% шанс на ошибку
#         raise ValueError(f"Ошибка обработки элемента {item}")
#     return item # Простая обработка данных
# Обработка результатов и исключений:
#
# Итог выполнения каждой задачи проверьте с помощью метода result(). Если задача завершилась успешно, выведете результат в консоль. Если во время выполнения задачи возникло исключение, выведете соответствующие сообщение об ошибке.
# Элемент 1 обработан успешно.
# print(f"Элемент {item} обработан успешно.")
#
# # В случае ошибки
# Элемент 6 вызвал ошибку: Ошибка обработки элемента 6
# print(f"Элемент {item} вызвал ошибку: {error}")
# Такие сообщения должны быть распечатаны для каждой задачи:
#
# Элемент 10 обработан успешно.
# Элемент 1 обработан успешно.
# ...
# ...
# ...
# Элемент 11 вызвал ошибку: Ошибка обработки элемента 11
# Элемент 19 вызвал ошибку: Ошибка обработки элемента 19

from concurrent.futures import ThreadPoolExecutor, as_completed
import threading
import time


class DataProcessor:
    def __init__(self):
        self.data = [i for i in range(1, 21)]
        self.executor = ThreadPoolExecutor(max_workers=len(self.data))
        self.futures = []

    @staticmethod
    def process_data(item):
        import random

        if random.random() < 0.2:
            raise ValueError(f"Ошибка обработки элемента {item}")
        return item

    def run(self):
        with self.executor as executor:
            for i in self.data:
                future = executor.submit(self.process_data, i)
                try:
                    print(f"Элемент {future.result()} обработан успешно.")
                except ValueError as e:
                    print(f"Элемент {i} вызвал ошибку: {e}")


dp = DataProcessor()
dp.run()
