# Ваша задача — написать асинхронный код , который позволит всем трем студентам одновременно начать прохождение выбранных ими курсов и корректно рассчитает время, затраченное каждым из них на обучение. Время прохождения курса reading_time должно быть вычислено по формуле steps / speed, с округлением вычисленного значения до двух символов после запятой (используйте функцию round(time, 2)).
#
# Используя предоставленные данные о студентах и их курсах, дополните функцию main() и  study_course(),  чтобы они асинхронно обрабатывали процесс обучения для Алекса, Марии и Ивана с помощью asyncio.create_task().
# В функции study_course(), которую вы должны написать, должен быть асинхронный вызов asyncio.sleep(), который позволяет корутине "заснуть" на вычисленную продолжительность прохождения курса (час учебы равен одной секунде сна), имитируя процесс обучения и позволяя другим асинхронным задачам выполняться, не блокируя основной поток.
#
# Для каждого студента должно быть выведено сообщение о начале курса, а после завершения — об успешном прохождении курса и затраченном на это времени. Учитывайте, что await должен использоваться для ожидания завершения каждой задачи, чтобы гарантировать получение результатов в корректном порядке.
#
# P.S. Проверьте, не забыли ли вы округлить время прохождения!
# Ваша программа должна выводить следующие данные.


import asyncio

students = {
    "Алекс": {"course": "Асинхронный Python", "steps": 515, "speed": 78},
    "Мария": {"course": "Многопоточный Python", "steps": 431, "speed": 62},
    "Иван": {"course": "WEB Парсинг на Python", "steps": 491, "speed": 57},
}


async def study_course(name: str, course: str, steps: int, speed: int) -> None:
    reading_time = round(steps / speed, 2)
    print(f"{name} начал проходить курс {course}.")

    await asyncio.sleep(reading_time)
    print(f"{name} прошел курс {course} за {reading_time} ч.")


async def main():
    tasks = [
        asyncio.create_task(
            study_course(name, data["course"], data["steps"], data["speed"])
        )
        for name, data in students.items()
    ]

    await asyncio.gather(*tasks)


asyncio.run(main())
