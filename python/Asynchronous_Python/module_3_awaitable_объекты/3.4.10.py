# Пошагово следуйте этим инструкциям для создания программы с  использованием объектов Task. Эта задача поможет закрепить знания о базовых принципах состояния объектов Task и Future и обработке асинхронных результатов.
# Определите корутину set_future_result(), принимающую два аргумента: value и delay. Внутри корутины выведите сообщение о начале задачи и ожидаемом времени установки результата.
# print(f"Задача начата. Установка результата '{value}' через {delay} секунд.")
# Используйте await asyncio.sleep(delay) для создания асинхронной задержки на delay секунд, имитируя длительную операцию.
#
# После задержки выведите сообщение о том, что результат был установлен, и верните value как результат функции.
#
# print("Результат установлен.")
# Создайте еще одну асинхронную функцию create_and_use_future(). Внутри этой функции инициируйте создание асинхронной задачи с помощью asyncio.create_task(), передавая ей вызов set_future_result() с аргументами "Успех" и 2.
#
# До ожидания результата от задачи проверьте и выведите ее состояние с помощью метода done(): ожидание или завершено.
#
# print("Состояние Task до выполнения: Ожидание")
#
# # или
#
# print("Состояние Task до выполнения: Завершено")
# Выведите сообщение о начале ожидания завершения задачи и используйте await для ожидания результата от Task.
#
# print("Задача запущена, ожидаем завершения...")
# После завершения задачи снова проверьте и выведите ее состояние для подтверждения изменения с помощью метода done().
#
# print("Состояние Task после выполнения: Завершено")
#
# # или
#
# print("Состояние Task после выполнения: Ожидание")
# Верните результат, полученный из задачи.
#
# Определите точку входа, корутину main(), в которой будет использоваться create_and_use_future() для демонстрации работы с Task. Выведите результат работы этой функции.
#
# result = await #Вызовите и дождитесь необходимую функцию
# print("Результат из Task:", result)

import asyncio


async def set_future_result(value, delay):
    print(f"Задача начата. Установка результата '{value}' через {delay} секунд.")
    await asyncio.sleep(delay)
    print("Результат установлен.")
    return value


async def create_and_use_future():
    task = asyncio.create_task(set_future_result("Успех", 2))

    if task.done():
        print("Состояние Task до выполнения: Завершено")
    else:
        print("Состояние Task до выполнения: Ожидание")

    print("Задача запущена, ожидаем завершения...")
    result = await task

    if task.done():
        print("Состояние Task после выполнения: Завершено")
    else:
        print("Состояние Task после выполнения: Ожидание")

    return result


async def main():
    result = await create_and_use_future()
    print("Результат из Task:", result)


asyncio.run(main())
