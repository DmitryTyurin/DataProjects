# future.cancel() или task.cancel() — oтмена объекта Task/Future.
#
# future.cancelled() или task.cancelled()— возвращает True, если Task/Future был отменен.
#
#
# except asyncio.CancelledError: перехват исключения "Ошибка отмены".
# Понимание этих процессов важно для предотвращения появления "висячих" операций в вашем приложении, которые могут привести к непредсказуемому поведению программы.
#
#
#
# Определите асинхронную функцию async_operation() которая выводит сообщение о начале операции, перед началом выполнения.
#
# print("Начало асинхронной операции.")
# Используйте await asyncio.sleep(2). Это создаст искусственную задержку, имитируя длительную асинхронную операцию.
#
# После задержки, выведите сообщение об успешном завершении операции. Это сообщение должно выводиться, если асинхронная операция не была отменена.
#
# print("Асинхронная операция успешно завершилась.")
# Добавьте обработку исключения asyncio.CancelledError. Если операция была отменена во время её выполнения, выведите соответствующее сообщение.
#
# print("Асинхронная операция была отменена в процессе выполнения.")
# Чтобы передать исключение дальше по цепочке вызовов, используйте ключевое слово raise (без указания конкретного исключения) для повторного возбуждения  этого исключения.
#
# # Вновь поднимаем исключение, чтобы передать его дальше
# raise
# В функции main(), выведите сообщение о запуске главной корутины.
#
# print("Главная корутина запущена.")
# Создайте объект Task с помощью asyncio.create_task(), обернув вызов async_operation().
#
# Ожидайте некоторое время await asyncio.sleep(0.1), а затем выведите сообщение о попытке отмены Task .
#
# print("Попытка отмены Task.")
# Отмените Task с помощью метода cancel().
#
# # Отменяем Task до его завершения
# task.cancel()
# Попытайтесь дождаться выполнения этой задачи и вывести полученный результат.
#
# print("Результат Task:", result)
# Обработайте исключение asyncio.CancelledError и выведите сообщение, подтверждающее отмену операции.
#
# print("Обработка исключения: Task был отменен.")
# Проверьте, был ли Task отменен с помощью метода cancelled(), и выведите результат проверки.
#
# # Проверяем, отменился ли Task
#     if task.cancelled():
#         print("Проверка: Task был отменен.")
#     else:
#         print("Проверка: Task не был отменен.")
# В конце, выведите сообщение о завершении главной корутины.
#
# print("Главная корутина завершена.")


import asyncio


async def async_operation():
    print("Начало асинхронной операции.")
    try:
        await asyncio.sleep(2)
        print("Асинхронная операция успешно завершилась.")
    except asyncio.CancelledError:
        print("Асинхронная операция была отменена в процессе выполнения.")
        raise


async def main():
    print("Главная корутина запущена.")

    task = asyncio.create_task(async_operation())

    await asyncio.sleep(0.1)

    print("Попытка отмены Task.")
    task.cancel()

    try:
        result = await task
        print("Результат Task:", result)
    except asyncio.CancelledError:
        print("Обработка исключения: Task был отменен.")

    if task.cancelled():
        print("Проверка: Task был отменен.")
    else:
        print("Проверка: Task не был отменен.")

    print("Главная корутина завершена.")


asyncio.run(main())
