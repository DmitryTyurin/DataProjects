# Часто возникает необходимость в последовательном выполнении задач, где результат одной операции служит входными данными для следующей. Реализуйте такой подход с помощью объектов Task и функции create_task(). Создайте и запустите цепочку асинхронных функций, где каждая последующая функция зависит от результата предыдущей.
#
#
#
# Определите асинхронную функцию first_function(x). В начале функции выведите сообщение о начале её выполнения с указанием аргумента.
#
# print(f"Выполняется первая функция с аргументом {x}")
# Затем используйте await asyncio.sleep(1) для имитации длительной операции. После задержки выведите сообщение о завершении функции с результатом операции и верните результат x + 1.
#
# print(f"Первая функция завершилась с результатом {result}")
#
#
# Определите асинхронную функцию second_function(x). Следуйте тому же шаблону, что и в first_function, но измените логику обработки аргумента на x * 2 и соответствующие сообщения.
#
# print(f"Выполняется вторая функция с аргументом {x}")
# Затем
#
# print(f"Вторая функция завершилась с результатом {result}")
#
#
# Определите асинхронную функцию third_function(x). Аналогично предыдущим функциям, имитируйте асинхронную операцию и измените логику на x + 3.
#
# print(f"Выполняется третья функция с аргументом {x}")
# Затем
# print(f"Третья функция завершилась с результатом {result}")
#
#
# Определите асинхронную функцию fourth_function(x). Используйте x ** 2 как логику обработки аргумента, следуя тому же шаблону сообщений и задержек.
#
# print(f"Выполняется четвертая функция с аргументом {x}")
# Затем
#
# print(f"Четвертая функция завершилась с результатом {result}")
#
#
# Определите асинхронную функцию main(). Выведите сообщение о начале цепочки асинхронных вызовов.
#
# print("Начало цепочки асинхронных вызовов")
# Используйте начальное значение 1 для запуска цепочки функций. Последовательно вызовите все четыре асинхронные функции с помощью await asyncio.create_task(), передавая результат предыдущей функции в качестве аргумента следующей.
#
#
# Выведите конечный результат цепочки вызовов. После завершения всех асинхронных функций выведите сообщение с конечным результатом, полученным от четвертой функции.
#
# print(f"Конечный результат цепочки вызовов: {final_result}")


import asyncio


async def first_function(x):
    print(f"Выполняется первая функция с аргументом {x}")
    await asyncio.sleep(1)
    result = x + 1
    print(f"Первая функция завершилась с результатом {result}")
    return result


async def second_function(x):
    print(f"Выполняется вторая функция с аргументом {x}")
    await asyncio.sleep(1)
    result = x * 2
    print(f"Вторая функция завершилась с результатом {result}")
    return result


async def third_function(x):
    print(f"Выполняется третья функция с аргументом {x}")
    await asyncio.sleep(1)
    result = x + 3
    print(f"Третья функция завершилась с результатом {result}")
    return result


async def fourth_function(x):
    print(f"Выполняется четвертая функция с аргументом {x}")
    await asyncio.sleep(1)
    result = x**2
    print(f"Четвертая функция завершилась с результатом {result}")
    return result


async def main():
    print("Начало цепочки асинхронных вызовов")

    task_1 = asyncio.create_task(first_function(1))
    result_1 = await task_1

    task_2 = asyncio.create_task(second_function(result_1))
    result_2 = await task_2

    task_3 = asyncio.create_task(third_function(result_2))
    result_3 = await task_3

    task_4 = asyncio.create_task(fourth_function(result_3))
    final_result = await task_4

    print(f"Конечный результат цепочки вызовов: {final_result}")


asyncio.run(main())
