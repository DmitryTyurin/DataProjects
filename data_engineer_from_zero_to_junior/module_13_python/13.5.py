# В базе данных каждая запись имеет уникальный ID, который должен начинаться с буквы "D" и быть длиной 10 символов.
# Напишите программу, которая принимает ID записи и проверяет его корректность.

text = input()

if len(text) != 10 or text[0] != 'D':
    print('Некорректный ID')


# Напишите программу, которая принимает значение метрики и проверяет, находится ли оно в допустимом диапазоне от 10 до 100 включительно.

print('Метрика в допустимом диапазоне' if 10 <= int(input()) <= 100 else '')


# Напишите программу, которая принимает две метрики: total_records (общее количество записей) и processed_records (количество обработанных записей).
# Программа должна:
# Проверить, что обе метрики положительные.
# Убедиться, что количество обработанных записей не превышает общее количество.
# Вывести "Консистентность данных нарушена", если любое из условий не выполняется, иначе — "Данные корректны".

total_records = int(input())
processed_records = int(input())

if ((total_records > 0
        and processed_records > 0)
        and total_records >= processed_records):
    print("Данные корректны")
else:
    print("Консистентность данных нарушена")


# Напишите программу, которая принимает на вход три значения: id1, id2, и id3.
# Если все значения уникальны, программа должна вывести "Все значения уникальны". Если есть дубликаты — "Обнаружены дубликаты".

id1 = int(input())
id2 = int(input())
id3 = int(input())

if id1 == id2 or id1 == id3 or id2 == id3:
    print("Обнаружены дубликаты")
else:
    print("Все значения уникальны")


# Представьте, что каждый этап обработки данных в системе мониторинга оценивается в процентах выполнения.
# Напишите программу, которая принимает на вход значения прогресса трёх этапов (stage1, stage2, stage3). Программа должна:
# Вывести "Все этапы завершены", если все этапы на 100%.
# Если хотя бы один этап на уровне ниже 50%, программа выводит "Проблема: один из этапов сильно отстаёт".
# Если все этапы в пределах от 50% до 99%, программа выводит "Обработка на завершающей стадии".
# Но могут быть и два этапа и даже один этап 100% и это все равно будет обработка на завершающей стадии.

stage1 = int(input())
stage2 = int(input())
stage3 = int(input())

if stage1 == 100 and stage2 == 100 and stage3 == 100:
    print("Все этапы завершены")
elif stage1 < 50 or stage2 < 50 or stage3 < 50:
    print("Проблема: один из этапов сильно отстаёт")
else:
    print("Обработка на завершающей стадии")


# У вас есть данные о загрузке сервера в трёх разных часах: hour1, hour2, hour3. Загрузка измеряется в процентах. Напишите программу, которая:
# Выводит "Стабильная нагрузка", если разница между самой высокой и самой низкой загрузкой не превышает 10%.
# Выводит "Нестабильная нагрузка" и предупреждение "Отклонение от нормы", если разница между самой высокой и самой низкой загрузкой превышает 10%.
# Если в какой-то из часов нагрузка превышает 90%, выводит "Перегрузка в часы пик".

hour1 = int(input())
hour2 = int(input())
hour3 = int(input())

min_load = min(hour1, hour2, hour3)
max_load = max(hour1, hour2, hour3)

if max_load - min_load <= 10:
    print("Стабильная нагрузка")

elif max_load - min_load > 10:
    print("Нестабильная нагрузка")
    print("Отклонение от нормы")

if hour1 > 90 or hour2 > 90 or hour3 > 90:
    print("Перегрузка в часы пик")


# Напишите программу, которая принимает на вход длины трёх сторон треугольника (a, b, c) и определяет его тип:
#
# "Равносторонний" — если все стороны равны.
# "Равнобедренный" — если только две стороны равны.
# "Разносторонний" — если все стороны различны.
# Если из данных сторон невозможно составить треугольник, программа должна вывести "Треугольник невозможен".

a, b, c = int(input()), int(input()), int(input())

if a + b <= c or a + c <= b or b + c <= a:
    print("Треугольник невозможен")
elif a == b == c:
    print("Равносторонний")
elif a == b or a == c or b == c:
    print("Равнобедренный")
else:
    print("Разносторонний")


# Напишите программу, которая принимает на вход пароль и проверяет его на соответствие следующим критериям:
# Длина пароля должна быть не менее 8 символов.
# Пароль должен содержать хотя бы одну заглавную букву.
# Пароль должен содержать хотя бы одну цифру.
# Пароль должен содержать хотя бы один специальный символ (!, @, #, $, %, &, *).
# Если все условия выполнены, программа выводит "Пароль валиден". Если одно из условий не выполнено, программа выводит, какой именно критерий не был соблюдён.
# Не запрещено использовать регулярки из модуля re.

import re

password = input()

if len(password) < 8:
    print("Длина пароля должна быть не менее 8 символов")

elif not re.search(r'[A-Z]', password):
    print("Пароль должен содержать хотя бы одну заглавную букву")

elif not re.search(r'\d', password):
    print("Пароль должен содержать хотя бы одну цифру")

elif not re.search(r'[!@#$%&*]', password):
    print ("Пароль должен содержать хотя бы один специальный символ (!, @, #, $, %, &, *)")

else:
    print("Пароль валиден")


